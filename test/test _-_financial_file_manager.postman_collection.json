{
	"info": {
		"_postman_id": "ed5fdb98-ec79-477e-9fd6-d07b70f19431",
		"name": "test  - financial file manager",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29153294"
	},
	"item": [
		{
			"name": "Users Successfuly",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"123.471.141-11\",",
							"            \"email\": \"test@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    pm.test(\"(/authn/create) - Should return 200 OK\", function () {",
							"        pm.expect(res).to.have.status(200);",
							"    });        ",
							"",
							"    pm.sendRequest({",
							"        url: 'http://localhost:8000/authn/jwt',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                \"Email\": \"test@example.com\",",
							"                \"CPF\": \"\",",
							"                \"Password\": \"hgGFHJ654*\"",
							"            })",
							"        }",
							"    }, function (err, res) {",
							"        pm.test(\"(/authn/jwt) - Should return 200 OK\", function () {",
							"            pm.expect(res.code).to.equal(200);",
							"        });",
							"",
							"        var responseBody = res.json();",
							"",
							"            pm.test(\"Should return an access token\", function () {",
							"                pm.expect(responseBody.access_token).to.not.be.undefined;",
							"                pm.expect(responseBody.access_token).to.not.be.null;",
							"            });",
							"",
							"            pm.environment.set(\"access_token\", responseBody.access_token);",
							"",
							"            pm.sendRequest({",
							"            url: 'http://localhost:8000/user/me',",
							"            method: 'GET',",
							"            header: {",
							"                'Authorization': 'Bearer ' + responseBody.access_token,",
							"                'Content-Type': 'application/json'",
							"            }",
							"            }, function (err, res) {",
							"                pm.test(\"(/user/me) - Should return 200 OK status\", function () {",
							"                    pm.expect(res).to.have.status(200);",
							"                });",
							"",
							"                var responseBody = res.json();",
							"                ",
							"                pm.test(\"(/user/me) - Should return user data\", function () {                   ",
							"                    ",
							"                    pm.expect(responseBody).to.have.property(\"name\", \"John\");",
							"                    pm.expect(responseBody).to.have.property(\"last_name\", \"Doe\");",
							"                    pm.expect(responseBody).to.have.property(\"cpf\", \"123.471.141-11\");",
							"                    pm.expect(responseBody).to.have.property(\"email\", \"test@example.com\");",
							"",
							"                    pm.expect(responseBody).to.have.property(\"created_at\").that.is.a('string');",
							"                    pm.expect(responseBody).to.have.property(\"update_log\", null);",
							"",
							"                    pm.expect(responseBody.id).to.be.a('string');",
							"                });   ",
							"",
							"            }); ",
							"",
							"            pm.sendRequest({",
							"                  url: 'http://localhost:8000/user/update',",
							"                  method: 'PUT',",
							"                  header: {",
							"                      'Authorization': 'Bearer ' + responseBody.access_token,",
							"                      'Content-Type': 'application/json'",
							"                  },",
							"                  body: {",
							"                  mode: 'raw',",
							"                  raw: JSON.stringify({",
							"                      \"name\": \"update\",",
							"                      \"last_name\": \"updated\",",
							"                      \"password\": \"hgGFHJ654*\"",
							"                  })",
							"                  }",
							"              }, function (err, res) {",
							"                pm.test(\"(/user/update) - Should return 200 OK\", function () {",
							"                    pm.expect(res).to.have.status(200);",
							"                    }); ",
							"                ",
							"                pm.sendRequest({",
							"                     url: 'http://localhost:8000/user/del',",
							"                     method: 'DELETE',",
							"                     header: {",
							"                         'Authorization': 'Bearer ' + responseBody.access_token,",
							"                         'Content-Type': 'application/json'",
							"                     }    ",
							"                }, function (err, res) {",
							"                    pm.test(\"(/user/del) - Should return 200\", function () {",
							"                        pm.expect(res).to.have.status(200);",
							"                    });",
							"            });       ",
							"                    ",
							"        });",
							"    });",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/authn/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"authn",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users Create Errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Create errors",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create', ",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"137.471.141-11\",",
							"            \"email\": \"testexample.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {   ",
							"",
							"    pm.test(\"Should return 400 BadRequest status\", function () {",
							"        pm.expect(res).to.have.status(400);",
							"    });   ",
							"",
							"    pm.test(\"Should indicate invalid 'email' in the response message\", function () {",
							"        var responseBody = res.json();",
							"        pm.expect(responseBody).to.eql({",
							"            \"message\": \"email: testexample.com does not validate as email\",",
							"            \"status\": \"BadRequest\"",
							"        });",
							"    });",
							"});",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create', ",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"133471.141-11\",",
							"            \"email\": \"test@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {   ",
							"",
							"    pm.test(\"Should return 400 BadRequest status\", function () {",
							"        pm.expect(res).to.have.status(400);",
							"    });    ",
							"",
							"    pm.test(\"Should indicate invalid 'cpf' in the response message\", function () {",
							"        var responseBody = res.json();",
							"        pm.expect(responseBody).to.eql({",
							"                \"message\": \"cpf: 133471.141-11 does not validate as matches(^[0-9]{3}\\\\.[0-9]{3}\\\\.[0-9]{3}-[0-9]{2}$)\",",
							"                \"status\": \"BadRequest\"",
							"            });",
							"    });",
							"});",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create', ",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"Jo\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"133.471.141-11\",",
							"            \"email\": \"test@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {   ",
							"",
							"    pm.test(\"Should return 400 BadRequest status\", function () {",
							"        pm.expect(res).to.have.status(400);",
							"    });",
							"",
							"    var responseBody = res.json();",
							"",
							"    pm.test(\"Should indicate invalid 'name' in the response message\", function () {",
							"        pm.expect(responseBody).to.eql({",
							"            \"message\": \"name: Jo does not validate as length(3|10)\",",
							"            \"status\": \"BadRequest\"",
							"        });",
							"    });",
							"});",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create', ",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"1111\",",
							"            \"cpf\": \"133.471.141-11\",",
							"            \"email\": \"test@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {   ",
							"",
							"    pm.test(\"Should return 400 BadRequest status\", function () {",
							"        pm.expect(res).to.have.status(400);",
							"    });",
							"",
							"    var responseBody = res.json();",
							"",
							"    pm.test(\"Should indicate invalid 'last_name' in the response message\", function () {",
							"    pm.expect(responseBody).to.eql({",
							"            \"message\": \"last_name: 1111 does not validate as matches(^[a-zA-Z ]+$)\",",
							"            \"status\": \"BadRequest\"",
							"        });",
							"    });",
							"});",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create', ",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"133.471.141-11\",",
							"            \"email\": \"test@example.com\",",
							"            \"password\": \"11aaaaa\"",
							"        })",
							"    }",
							"}, function (err, res) {   ",
							"",
							"    pm.test(\"Should return 400 BadRequest status\", function () {",
							"        pm.expect(res).to.have.status(400);",
							"    });",
							"",
							"    var responseBody = res.json();",
							"",
							"    pm.test(\"Should indicate invalid 'password' in the response message\", function () {",
							"        pm.expect(responseBody).to.eql({",
							"            \"message\": \"Valid password is required. password must be at least 10 characters long\",",
							"            \"status\": \"BadRequest\"",
							"        });",
							"    });",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/authn/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"authn",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users Authn Errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Authn errors",
							"",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"123.471.141-12\",",
							"            \"email\": \"test-authn@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    pm.test(\"(/authn/create) - Should return 200 OK\", function () {",
							"        pm.expect(res).to.have.status(200);",
							"    });",
							"",
							"    // Continue to the next request",
							"    var invalidEmail = \"invalid@example.com\";",
							"    pm.sendRequest({",
							"        url: 'http://localhost:8000/authn/jwt',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                \"Email\": invalidEmail,",
							"                \"CPF\": \"\",",
							"                \"Password\": \"hgGFHJ654*\"",
							"            })",
							"        }",
							"    }, function (err, res) {",
							"        pm.test(\"(/authn/jwt) - Should return 401 Unauthorized when invalid 'email' is provided\", function () {",
							"            pm.expect(res.code).to.equal(401);",
							"        });",
							"",
							"        // Continue to the next request",
							"        var invalidPassword = \"hgGFH654*\";",
							"        pm.sendRequest({",
							"            url: 'http://localhost:8000/authn/jwt',",
							"            method: 'POST',",
							"            header: {",
							"                'Content-Type': 'application/json'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    \"Email\": \"\",",
							"                    \"CPF\": \"123.475.141-12\",",
							"                    \"Password\": invalidPassword",
							"                })",
							"            }",
							"        }, function (err, res) {",
							"            pm.test(\"(/authn/jwt) - Should return 401 Unauthorized when invalid 'password' is provided\", function () {",
							"                pm.expect(res.code).to.equal(400);",
							"            });",
							"",
							"            // Continue to the next request",
							"            pm.sendRequest({",
							"                url: 'http://localhost:8000/authn/jwt',",
							"                method: 'POST',",
							"                header: {",
							"                    'Content-Type': 'application/json'",
							"                },",
							"                body: {",
							"                    mode: 'raw',",
							"                    raw: JSON.stringify({",
							"                        \"Email\": \"test-authn@example.com\",",
							"                        \"CPF\": \"\",",
							"                        \"Password\": \"hgGFHJ654*\"",
							"                    })",
							"                }",
							"            }, function (err, res) {",
							"                pm.test(\"(/authn/jwt) - Should return 200 OK\", function () {",
							"                    pm.expect(res.code).to.equal(200);",
							"                });",
							"",
							"                var responseBody = res.json();",
							"                pm.environment.set(\"access_token\", responseBody.access_token);",
							"                ",
							"                pm.sendRequest({",
							"                    url: 'http://localhost:8000/user/del',",
							"                    method: 'DELETE',",
							"                    header: {",
							"                        'Authorization': 'Bearer ' + responseBody.access_token,",
							"                        'Content-Type': 'application/json'",
							"                    }",
							"                }, function (err, res) {",
							"                    pm.test(\"(/user/del) - Should return 200\", function () {",
							"                        pm.expect(res).to.have.status(200);",
							"                    });",
							"                });",
							"            });",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/authn/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"authn",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Users Update Errors",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Update password error",
							"pm.sendRequest({",
							"    url: 'http://localhost:8000/authn/create',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json'",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify({",
							"            \"name\": \"John\",",
							"            \"last_name\": \"Doe\",",
							"            \"cpf\": \"123.471.141-13\",",
							"            \"email\": \"test-update@example.com\",",
							"            \"password\": \"hgGFHJ654*\"",
							"        })",
							"    }",
							"}, function (err, res) {",
							"    pm.test(\"(/authn/create) - Should return 200 OK\", function () {",
							"        pm.expect(res).to.have.status(200);",
							"    });   ",
							"",
							"",
							"    pm.sendRequest({",
							"        url: 'http://localhost:8000/authn/jwt',",
							"        method: 'POST',",
							"        header: {",
							"            'Content-Type': 'application/json'",
							"        },",
							"        body: {",
							"            mode: 'raw',",
							"            raw: JSON.stringify({",
							"                \"Email\": \"test-update@example.com\",",
							"                \"CPF\": \"\",",
							"                \"Password\": \"hgGFHJ654*\"",
							"            })",
							"        }",
							"    }, function (err, res) {",
							"        pm.test(\"(/authn/jwt) - Should return 200 OK\", function () {",
							"            pm.expect(res).to.have.status(200);",
							"        });",
							"",
							"        var responseBody = res.json();",
							"        pm.environment.set(\"access_token\", responseBody.access_token);",
							"",
							"        invalidPassword = \"hgGFHJ54*\";",
							"        pm.sendRequest({",
							"            url: 'http://localhost:8000/user/update',",
							"            method: 'PUT',",
							"            header: {",
							"                'Authorization': 'Bearer ' + responseBody.access_token,",
							"                'Content-Type': 'application/json'",
							"            },",
							"            body: {",
							"                mode: 'raw',",
							"                raw: JSON.stringify({",
							"                    \"name\": \"update\",",
							"                    \"last_name\": \"updated\",",
							"                    \"password\": invalidPassword",
							"                })",
							"            }",
							"        }, function (err, res) {",
							"            pm.test(\"(/user/update) - Should return 400 BadRequest when invalid 'password' is provided\", function () {",
							"                pm.expect(res).to.have.status(400);",
							"            });",
							"",
							"            pm.test(\"Should indicate invalid password in the response message\", function () {",
							"                var responseBody = res.json();",
							"                pm.expect(responseBody).to.eql({",
							"                    \"message\": \"Valid password is required. password must be at least 10 characters long\",",
							"                    \"status\": \"BadRequest\"",
							"                });",
							"            });",
							"",
							"            pm.sendRequest({",
							"                url: 'http://localhost:8000/user/del',",
							"                method: 'DELETE',",
							"                header: {",
							"                    'Authorization': 'Bearer ' + responseBody.access_token,",
							"                    'Content-Type': 'application/json'",
							"                }",
							"            }, function (err, res) {",
							"                pm.test(\"(/user/del) - Should return 200\", function () {",
							"                    pm.expect(res).to.have.status(200);",
							"                });",
							"            });",
							"        });",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/authn/create",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"authn",
						"create"
					]
				}
			},
			"response": []
		}
	]
}