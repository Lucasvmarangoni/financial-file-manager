// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/memcached.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	memcache "github.com/bradfitz/gomemcache/memcache"
	gomock "github.com/golang/mock/gomock"
)

// MockMencacher is a mock of Mencacher interface.
type MockMencacher struct {
	ctrl     *gomock.Controller
	recorder *MockMencacherMockRecorder
}

// MockMencacherMockRecorder is the mock recorder for MockMencacher.
type MockMencacherMockRecorder struct {
	mock *MockMencacher
}

// NewMockMencacher creates a new mock instance.
func NewMockMencacher(ctrl *gomock.Controller) *MockMencacher {
	mock := &MockMencacher{ctrl: ctrl}
	mock.recorder = &MockMencacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMencacher) EXPECT() *MockMencacherMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMencacher) Delete(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMencacherMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMencacher)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockMencacher) Get(key string) (*memcache.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(*memcache.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMencacherMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMencacher)(nil).Get), key)
}

// GetMulti mocks base method.
func (m *MockMencacher) GetMulti(key []string) (map[string]*memcache.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMulti", key)
	ret0, _ := ret[0].(map[string]*memcache.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMulti indicates an expected call of GetMulti.
func (mr *MockMencacherMockRecorder) GetMulti(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMulti", reflect.TypeOf((*MockMencacher)(nil).GetMulti), key)
}

// Set mocks base method.
func (m *MockMencacher) Set(key string, i interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, i)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockMencacherMockRecorder) Set(key, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMencacher)(nil).Set), key, i)
}
