// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/queue/rabbitmq.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	amqp "github.com/streadway/amqp"
)

// MockIRabbitMQ is a mock of IRabbitMQ interface.
type MockIRabbitMQ struct {
	ctrl     *gomock.Controller
	recorder *MockIRabbitMQMockRecorder
}

// MockIRabbitMQMockRecorder is the mock recorder for MockIRabbitMQ.
type MockIRabbitMQMockRecorder struct {
	mock *MockIRabbitMQ
}

// NewMockIRabbitMQ creates a new mock instance.
func NewMockIRabbitMQ(ctrl *gomock.Controller) *MockIRabbitMQ {
	mock := &MockIRabbitMQ{ctrl: ctrl}
	mock.recorder = &MockIRabbitMQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRabbitMQ) EXPECT() *MockIRabbitMQMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockIRabbitMQ) Connect() *amqp.Channel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(*amqp.Channel)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockIRabbitMQMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockIRabbitMQ)(nil).Connect))
}

// Consume mocks base method.
func (m *MockIRabbitMQ) Consume(messageChannel chan amqp.Delivery, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", messageChannel, routingKey)
}

// Consume indicates an expected call of Consume.
func (mr *MockIRabbitMQMockRecorder) Consume(messageChannel, routingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockIRabbitMQ)(nil).Consume), messageChannel, routingKey)
}

// Publish mocks base method.
func (m *MockIRabbitMQ) Publish(message, contentType, exchange, routingKey string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", message, contentType, exchange, routingKey)
}

// Publish indicates an expected call of Publish.
func (mr *MockIRabbitMQMockRecorder) Publish(message, contentType, exchange, routingKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRabbitMQ)(nil).Publish), message, contentType, exchange, routingKey)
}
