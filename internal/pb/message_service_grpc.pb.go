// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContractRequestClient is the client API for ContractRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContractRequestClient interface {
	ContractRequest(ctx context.Context, in *Contract, opts ...grpc.CallOption) (*Response, error)
}

type contractRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewContractRequestClient(cc grpc.ClientConnInterface) ContractRequestClient {
	return &contractRequestClient{cc}
}

func (c *contractRequestClient) ContractRequest(ctx context.Context, in *Contract, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ContractRequest/ContractRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContractRequestServer is the server API for ContractRequest service.
// All implementations must embed UnimplementedContractRequestServer
// for forward compatibility
type ContractRequestServer interface {
	ContractRequest(context.Context, *Contract) (*Response, error)
	mustEmbedUnimplementedContractRequestServer()
}

// UnimplementedContractRequestServer must be embedded to have forward compatible implementations.
type UnimplementedContractRequestServer struct {
}

func (UnimplementedContractRequestServer) ContractRequest(context.Context, *Contract) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractRequest not implemented")
}
func (UnimplementedContractRequestServer) mustEmbedUnimplementedContractRequestServer() {}

// UnsafeContractRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContractRequestServer will
// result in compilation errors.
type UnsafeContractRequestServer interface {
	mustEmbedUnimplementedContractRequestServer()
}

func RegisterContractRequestServer(s grpc.ServiceRegistrar, srv ContractRequestServer) {
	s.RegisterService(&ContractRequest_ServiceDesc, srv)
}

func _ContractRequest_ContractRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContractRequestServer).ContractRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContractRequest/ContractRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContractRequestServer).ContractRequest(ctx, req.(*Contract))
	}
	return interceptor(ctx, in, info, handler)
}

// ContractRequest_ServiceDesc is the grpc.ServiceDesc for ContractRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContractRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContractRequest",
	HandlerType: (*ContractRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContractRequest",
			Handler:    _ContractRequest_ContractRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message_service.proto",
}

// ExtractRequestClient is the client API for ExtractRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtractRequestClient interface {
	ExtractRequest(ctx context.Context, in *Extract, opts ...grpc.CallOption) (*Response, error)
}

type extractRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewExtractRequestClient(cc grpc.ClientConnInterface) ExtractRequestClient {
	return &extractRequestClient{cc}
}

func (c *extractRequestClient) ExtractRequest(ctx context.Context, in *Extract, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ExtractRequest/ExtractRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtractRequestServer is the server API for ExtractRequest service.
// All implementations must embed UnimplementedExtractRequestServer
// for forward compatibility
type ExtractRequestServer interface {
	ExtractRequest(context.Context, *Extract) (*Response, error)
	mustEmbedUnimplementedExtractRequestServer()
}

// UnimplementedExtractRequestServer must be embedded to have forward compatible implementations.
type UnimplementedExtractRequestServer struct {
}

func (UnimplementedExtractRequestServer) ExtractRequest(context.Context, *Extract) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractRequest not implemented")
}
func (UnimplementedExtractRequestServer) mustEmbedUnimplementedExtractRequestServer() {}

// UnsafeExtractRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtractRequestServer will
// result in compilation errors.
type UnsafeExtractRequestServer interface {
	mustEmbedUnimplementedExtractRequestServer()
}

func RegisterExtractRequestServer(s grpc.ServiceRegistrar, srv ExtractRequestServer) {
	s.RegisterService(&ExtractRequest_ServiceDesc, srv)
}

func _ExtractRequest_ExtractRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Extract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtractRequestServer).ExtractRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExtractRequest/ExtractRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtractRequestServer).ExtractRequest(ctx, req.(*Extract))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtractRequest_ServiceDesc is the grpc.ServiceDesc for ExtractRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtractRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExtractRequest",
	HandlerType: (*ExtractRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractRequest",
			Handler:    _ExtractRequest_ExtractRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message_service.proto",
}

// InvoiceRequestClient is the client API for InvoiceRequest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceRequestClient interface {
	InvoiceRequest(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Response, error)
}

type invoiceRequestClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceRequestClient(cc grpc.ClientConnInterface) InvoiceRequestClient {
	return &invoiceRequestClient{cc}
}

func (c *invoiceRequestClient) InvoiceRequest(ctx context.Context, in *Invoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/InvoiceRequest/InvoiceRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceRequestServer is the server API for InvoiceRequest service.
// All implementations must embed UnimplementedInvoiceRequestServer
// for forward compatibility
type InvoiceRequestServer interface {
	InvoiceRequest(context.Context, *Invoice) (*Response, error)
	mustEmbedUnimplementedInvoiceRequestServer()
}

// UnimplementedInvoiceRequestServer must be embedded to have forward compatible implementations.
type UnimplementedInvoiceRequestServer struct {
}

func (UnimplementedInvoiceRequestServer) InvoiceRequest(context.Context, *Invoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceRequest not implemented")
}
func (UnimplementedInvoiceRequestServer) mustEmbedUnimplementedInvoiceRequestServer() {}

// UnsafeInvoiceRequestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceRequestServer will
// result in compilation errors.
type UnsafeInvoiceRequestServer interface {
	mustEmbedUnimplementedInvoiceRequestServer()
}

func RegisterInvoiceRequestServer(s grpc.ServiceRegistrar, srv InvoiceRequestServer) {
	s.RegisterService(&InvoiceRequest_ServiceDesc, srv)
}

func _InvoiceRequest_InvoiceRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Invoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceRequestServer).InvoiceRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InvoiceRequest/InvoiceRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceRequestServer).InvoiceRequest(ctx, req.(*Invoice))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceRequest_ServiceDesc is the grpc.ServiceDesc for InvoiceRequest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceRequest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InvoiceRequest",
	HandlerType: (*InvoiceRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InvoiceRequest",
			Handler:    _InvoiceRequest_InvoiceRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/message_service.proto",
}
